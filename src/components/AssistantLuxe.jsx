import React, { useState } from 'react';
import { 
  Search, ChevronDown, X, Filter, AlertCircle
} from 'lucide-react';

const AssistantLuxe = () => {
  const [activeAgent, setActiveAgent] = useState('market');
  const [conversation, setConversation] = useState([]);
  const [message, setMessage] = useState('');
  const [isThinking, setIsThinking] = useState(false);
  const [showAdvancedSearch, setShowAdvancedSearch] = useState(false);
  
  // √âtats pour les filtres avanc√©s
  const [selectedBrand, setSelectedBrand] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('');
  const [selectedModel, setSelectedModel] = useState('');
  const [selectedSize, setSelectedSize] = useState('');
  const [selectedCondition, setSelectedCondition] = useState('');
  const [selectedColor, setSelectedColor] = useState('');
  const [hasOdor, setHasOdor] = useState('');
  const [hasTear, setHasTear] = useState('');

  // Base de donn√©es enrichie avec 100+ marques
  const brandsDatabase = {
    "Maroquinerie": [
      "Louis Vuitton", "Chanel", "Herm√®s", "Gucci", "Dior", "Prada", "C√©line", 
      "Balenciaga", "Saint Laurent", "Bottega Veneta", "Loewe", "Fendi", "Valentino",
      "Givenchy", "Burberry", "Coach", "Michael Kors", "Furla", "Longchamp", "Goyard",
      "Moynat", "Delvaux", "Berluti", "Dunhill", "Mulberry", "MCM", "Versace"
    ],
    "Montres": [
      "Rolex", "Patek Philippe", "Audemars Piguet", "Omega", "Cartier", "IWC",
      "Jaeger-LeCoultre", "Vacheron Constantin", "Breguet", "Blancpain", "TAG Heuer",
      "Breitling", "Panerai", "Hublot", "Richard Mille", "Chopard", "Bulgari",
      "Piaget", "Zenith", "Tudor", "Longines", "Rado", "Tissot", "Bell & Ross"
    ],
    "Bijoux": [
      "Cartier", "Van Cleef & Arpels", "Bulgari", "Tiffany & Co", "Harry Winston",
      "Chopard", "Graff", "Piaget", "Boucheron", "Chaumet", "Messika", "Pomellato",
      "Buccellati", "De Beers", "Mikimoto", "Tasaki", "David Yurman", "Chrome Hearts"
    ],
    "V√™tements": [
      "Chanel", "Dior", "Saint Laurent", "Balenciaga", "Gucci", "Prada", "Versace",
      "Dolce & Gabbana", "Armani", "Valentino", "Givenchy", "Balmain", "Isabel Marant",
      "Off-White", "Vetements", "Rick Owens", "Maison Margiela", "Comme des Gar√ßons",
      "Thom Browne", "Alexander McQueen", "Stella McCartney", "Kenzo", "Acne Studios"
    ],
    "Chaussures": [
      "Christian Louboutin", "Jimmy Choo", "Manolo Blahnik", "Aquazzura", "Gianvito Rossi",
      "Ren√© Caovilla", "Giuseppe Zanotti", "Valentino", "Roger Vivier", "Salvatore Ferragamo",
      "Tod's", "Prada", "Gucci", "Balenciaga", "Golden Goose", "Common Projects",
      "Maison Margiela", "Rick Owens", "Y-3", "Visvim", "Church's", "John Lobb"
    ],
    "Accessoires": [
      "Herm√®s", "Louis Vuitton", "Chanel", "Gucci", "Fendi", "Bulgari", "Cartier",
      "Montblanc", "Dupont", "Rimowa", "Globe-Trotter", "Smythson", "Aspinal of London",
      "Berluti", "Kiton", "Stefano Ricci", "Zilli", "Brioni", "Tom Ford", "Ralph Lauren"
    ]
  };

  // Mod√®les par marque
  const modelsByBrand = {
    "Louis Vuitton": ["Speedy", "Neverfull", "Pochette M√©tis", "Alma", "Keepall", "Twist", "Coussin", "Multi Pochette", "Capucines", "New Wave"],
    "Chanel": ["Classic Flap", "Boy", "19", "Gabrielle", "2.55", "WOC", "Deauville", "Shopping Tote", "Diana", "Trendy CC"],
    "Herm√®s": ["Birkin", "Kelly", "Constance", "Evelyne", "Garden Party", "Picotin", "Lindy", "Halzan", "Bolide", "Jypsiere"],
    "Gucci": ["Dionysus", "Marmont", "Jackie", "Soho", "Bamboo", "Sylvie", "Ophidia", "Horsebit 1955", "Diana", "Blondie"],
    "Dior": ["Lady Dior", "Saddle", "Book Tote", "30 Montaigne", "Bobby", "Caro", "J'Adior", "Diorama", "My ABCDior", "Diorever"],
    "Rolex": ["Submariner", "Daytona", "GMT-Master II", "Datejust", "Day-Date", "Explorer", "Yacht-Master", "Sea-Dweller", "Air-King", "Milgauss"],
    "Cartier": ["Tank", "Santos", "Ballon Bleu", "Panth√®re", "Pasha", "Drive", "Ronde", "Calibre", "Cl√©", "Baignoire"]
  };

  // Options de filtres
  const filterOptions = {
    conditions: [
      { value: "neuf-etiquette", label: "Neuf avec √©tiquette" },
      { value: "neuf-sans-etiquette", label: "Neuf sans √©tiquette" },
      { value: "tres-bon", label: "Tr√®s bon √©tat" },
      { value: "bon", label: "Bon √©tat" },
      { value: "moyen", label: "√âtat moyen" },
      { value: "correct", label: "√âtat correct" }
    ],
    colors: [
      "Noir", "Blanc", "Beige", "Marron", "Camel", "Rouge", "Rose", "Bleu", 
      "Vert", "Jaune", "Orange", "Violet", "Gris", "Dor√©", "Argent√©", "Multicolore"
    ],
    sizes: {
      "Maroquinerie": ["XXS", "XS", "PM", "MM", "GM", "Small", "Medium", "Large", "25", "28", "30", "32", "35", "40"],
      "V√™tements": ["XXS", "XS", "S", "M", "L", "XL", "XXL", "34", "36", "38", "40", "42", "44", "46"],
      "Chaussures": ["35", "36", "37", "38", "39", "40", "41", "42", "43", "44", "45"],
      "Montres": ["36mm", "38mm", "39mm", "40mm", "41mm", "42mm", "44mm", "46mm", "48mm"],
      "Bijoux": ["XS", "S", "M", "L", "15", "16", "17", "18", "50", "52", "54", "56"]
    },
    odors: [
      { value: "none", label: "Aucune odeur" },
      { value: "light", label: "L√©g√®re odeur" },
      { value: "strong", label: "Forte odeur" },
      { value: "perfume", label: "Parfum" },
      { value: "smoke", label: "Fum√©e/Tabac" }
    ],
    tears: [
      { value: "none", label: "Aucune d√©chirure" },
      { value: "minor", label: "Micro d√©chirure" },
      { value: "repairable", label: "R√©parable" },
      { value: "major", label: "Importante" }
    ]
  };

  // Base de donn√©es des prix enrichie
  const realMarketDatabase = {
    "Louis Vuitton": {
      "Speedy": {
        sizes: ["25", "30", "35", "40"],
        prices: {
          "neuf-etiquette": { vente: [1200, 1800], achat: [800, 1200], japon: [700, 1000] },
          "neuf-sans-etiquette": { vente: [1000, 1600], achat: [600, 1000], japon: [500, 850] },
          "tres-bon": { vente: [700, 1200], achat: [400, 700], japon: [300, 600] },
          "bon": { vente: [450, 850], achat: [250, 450], japon: [200, 400] },
          "moyen": { vente: [300, 550], achat: [150, 300], japon: [120, 250] },
          "correct": { vente: [200, 350], achat: [80, 150], japon: [60, 120] }
        }
      },
      "Neverfull": {
        sizes: ["PM", "MM", "GM"],
        prices: {
          "neuf-etiquette": { vente: [1600, 2200], achat: [1100, 1600], japon: [900, 1400] },
          "neuf-sans-etiquette": { vente: [1400, 2000], achat: [900, 1400], japon: [700, 1200] },
          "tres-bon": { vente: [1000, 1600], achat: [600, 1000], japon: [500, 900] },
          "bon": { vente: [700, 1200], achat: [400, 700], japon: [300, 600] },
          "moyen": { vente: [500, 900], achat: [250, 500], japon: [200, 400] },
          "correct": { vente: [350, 600], achat: [150, 300], japon: [120, 250] }
        }
      }
    },
    "Chanel": {
      "Classic Flap": {
        sizes: ["Small", "Medium", "Jumbo", "Maxi"],
        prices: {
          "neuf-etiquette": { vente: [7000, 12000], achat: [5000, 9000], japon: [4500, 8000] },
          "neuf-sans-etiquette": { vente: [6000, 10000], achat: [4000, 7500], japon: [3500, 6500] },
          "tres-bon": { vente: [4500, 8000], achat: [3000, 6000], japon: [2500, 5000] },
          "bon": { vente: [3500, 6500], achat: [2000, 4500], japon: [1800, 4000] },
          "moyen": { vente: [2500, 5000], achat: [1500, 3500], japon: [1200, 3000] },
          "correct": { vente: [1800, 3500], achat: [1000, 2500], japon: [800, 2000] }
        }
      }
    },
    "Rolex": {
      "Submariner": {
        sizes: ["40mm", "41mm"],
        prices: {
          "neuf-etiquette": { vente: [12000, 18000], achat: [10000, 15000], japon: [9000, 14000] },
          "neuf-sans-etiquette": { vente: [11000, 16000], achat: [9000, 13000], japon: [8000, 12000] },
          "tres-bon": { vente: [9000, 14000], achat: [7000, 11000], japon: [6000, 10000] },
          "bon": { vente: [7500, 12000], achat: [5500, 9000], japon: [5000, 8000] },
          "moyen": { vente: [6000, 10000], achat: [4000, 7000], japon: [3500, 6000] },
          "correct": { vente: [5000, 8000], achat: [3000, 5000], japon: [2500, 4500] }
        }
      }
    }
  };

  const agents = [
    {
      id: 'market',
      name: 'MARKET ANALYST',
      specialty: 'Analyse Prix R√©el Temps',
      color: '#10B981', // green
      emoji: 'üìä',
      description: 'Prix actuels France, Japon, plateformes'
    },
    {
      id: 'arbitrage',
      name: 'ARBITRAGE EXPERT',
      specialty: 'Opportunit√©s Achat/Revente',
      color: '#8B5CF6', // purple
      emoji: 'üíπ',
      description: 'Meilleures affaires et marges possibles'
    },
    {
      id: 'authenticator',
      name: 'AUTH SPECIALIST',
      specialty: 'Authentification & Red Flags',
      color: '#EF4444', // red
      emoji: 'üîç',
      description: '√âviter les fakes et arnaques'
    },
    {
      id: 'condition',
      name: 'CONDITION EXPERT',
      specialty: '√âvaluation √âtat Produits',
      color: '#F59E0B', // amber
      emoji: 'üíé',
      description: 'Impact √©tat sur prix'
    }
  ];

  // Fonction pour obtenir les mod√®les selon la marque s√©lectionn√©e
  const getAvailableModels = () => {
    if (!selectedBrand) return [];
    return modelsByBrand[selectedBrand] || [];
  };

  // Fonction pour obtenir les tailles selon la cat√©gorie
  const getAvailableSizes = () => {
    if (!selectedCategory) return [];
    return filterOptions.sizes[selectedCategory] || [];
  };

  // Fonction pour g√©n√©rer un message √† partir des filtres
  const generateMessageFromFilters = () => {
    let msg = '';
    
    if (selectedBrand) {
      msg += selectedBrand + ' ';
      
      // Si pas de mod√®le s√©lectionn√©, essayer de le d√©tecter
      if (!selectedModel && modelsByBrand[selectedBrand]) {
        // Pour Louis Vuitton, on met Speedy par d√©faut si pas de mod√®le
        if (selectedBrand === 'Louis Vuitton') {
          msg += 'Speedy ';
        }
      } else if (selectedModel) {
        msg += selectedModel + ' ';
      }
    }
    if (selectedSize) msg += 'taille ' + selectedSize + ' ';
    if (selectedColor) msg += 'couleur ' + selectedColor + ' ';
    if (selectedCondition) {
      const condition = filterOptions.conditions.find(c => c.value === selectedCondition);
      if (condition) msg += 'en ' + condition.label.toLowerCase() + ' ';
    }
    if (hasOdor && hasOdor !== 'none') {
      const odor = filterOptions.odors.find(o => o.value === hasOdor);
      if (odor) msg += 'avec ' + odor.label.toLowerCase() + ' ';
    }
    if (hasTear && hasTear !== 'none') {
      const tear = filterOptions.tears.find(t => t.value === hasTear);
      if (tear) msg += tear.label.toLowerCase() + ' ';
    }
    
    return msg.trim() || 'Analyse du march√©';
  };

  // Fonction pour r√©initialiser les filtres
  const resetFilters = () => {
    setSelectedBrand('');
    setSelectedCategory('');
    setSelectedModel('');
    setSelectedSize('');
    setSelectedCondition('');
    setSelectedColor('');
    setHasOdor('');
    setHasTear('');
  };

  // Fonction am√©lior√©e pour analyser et r√©pondre
  const sendMessage = async () => {
    const finalMessage = showAdvancedSearch ? generateMessageFromFilters() : message;
    if (!finalMessage.trim()) return;
    
    // Si on utilise les filtres et qu'on a au moins une marque, on peut analyser
    if (showAdvancedSearch && !selectedBrand) {
      alert("Veuillez s√©lectionner au moins une marque");
      return;
    }
    
    const userMessage = {
      type: 'user',
      content: finalMessage,
      timestamp: new Date().toLocaleTimeString()
    };
    
    setConversation(prev => [...prev, userMessage]);
    setMessage('');
    setIsThinking(true);
    
    console.log('Analyse en cours...', { selectedBrand, selectedModel, finalMessage });
    
    try {
      // Essayer d'abord avec votre vrai backend
      const response = await fetch('https://selezione-ia-backend.onrender.com/assistant-luxe', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ 
          message: finalMessage,
          mode: activeAgent,
          brand: selectedBrand,
          model: selectedModel
        })
      });

      const data = await response.json();
      
      if (data.error) {
        // Si erreur backend, utiliser la r√©ponse locale intelligente
        console.warn('Backend error, using local response:', data.error);
        generateLocalResponse(finalMessage);
      } else {
        // Utiliser la r√©ponse du backend
        const assistantMessage = {
          type: 'assistant',
          content: data.response || data.message || data.analyse || 'R√©ponse re√ßue du backend',
          timestamp: new Date().toLocaleTimeString(),
          agent: agents.find(a => a.id === activeAgent)
        };
        
        setConversation(prev => [...prev, assistantMessage]);
        setIsThinking(false);
      }
    } catch (error) {
      console.error('Erreur API Assistant:', error);
      // Fallback vers la r√©ponse locale
      generateLocalResponse(finalMessage);
    }
  };

  // Fonction pour g√©n√©rer une r√©ponse locale intelligente
  const generateLocalResponse = (finalMessage) => {
    // G√©n√©rer la r√©ponse selon l'agent et les filtres
    setTimeout(() => {
      let response = '';
      const agent = agents.find(a => a.id === activeAgent);
      
      if (activeAgent === 'market') {
        // Extraire le mod√®le du message si pas s√©lectionn√©
        let detectedModel = selectedModel;
        if (!detectedModel && selectedBrand) {
          const brandModels = modelsByBrand[selectedBrand] || [];
          for (const model of brandModels) {
            if (finalMessage.toLowerCase().includes(model.toLowerCase())) {
              detectedModel = model;
              break;
            }
          }
        }
        
        if (selectedBrand && detectedModel) {
          const brandData = realMarketDatabase[selectedBrand];
          const modelData = brandData?.[detectedModel];
          
          if (modelData) {
            const condition = selectedCondition || 'bon';
            const prices = modelData.prices[condition];
            
            response = `üìä ANALYSE MARCH√â D√âTAILL√âE - ${new Date().toLocaleDateString('fr-FR')}\n\n`;
            response += `üéØ Produit: ${selectedBrand} ${detectedModel}\n`;
            if (selectedSize) response += `üìè Taille: ${selectedSize}\n`;
            if (selectedColor) response += `üé® Couleur: ${selectedColor}\n`;
            response += `üìç √âtat: ${filterOptions.conditions.find(c => c.value === condition)?.label || 'Bon √©tat'}\n`;
            if (hasOdor && hasOdor !== 'none') response += `üëÉ Odeur: ${filterOptions.odors.find(o => o.value === hasOdor)?.label}\n`;
            if (hasTear && hasTear !== 'none') response += `‚úÇÔ∏è D√©chirure: ${filterOptions.tears.find(t => t.value === hasTear)?.label}\n`;
            response += `\nüí∞ PRIX ACTUELS DU MARCH√â:\n\n`;
            
            response += `üá´üá∑ FRANCE/EUROPE:\n`;
            response += `‚Ä¢ Prix de VENTE: ${prices.vente[0]}‚Ç¨ - ${prices.vente[1]}‚Ç¨\n`;
            response += `‚Ä¢ Prix d'ACHAT pro: ${prices.achat[0]}‚Ç¨ - ${prices.achat[1]}‚Ç¨\n`;
            response += `‚Ä¢ Marge revendeur: ${Math.round(((prices.vente[0]/prices.achat[1])-1)*100)}% - ${Math.round(((prices.vente[1]/prices.achat[0])-1)*100)}%\n\n`;
            
            response += `üáØüáµ JAPON (Tokyo/Osaka):\n`;
            response += `‚Ä¢ Prix d'ACHAT: ${prices.japon[0]}‚Ç¨ - ${prices.japon[1]}‚Ç¨\n`;
            response += `‚Ä¢ √âquivalent: ¬•${Math.round(prices.japon[0]*150)} - ¬•${Math.round(prices.japon[1]*150)}\n`;
            response += `‚Ä¢ Potentiel profit import: +${Math.round(((prices.vente[0]/prices.japon[1])-1)*100)}% √† +${Math.round(((prices.vente[1]/prices.japon[0])-1)*100)}%\n\n`;
            
            // Ajustement prix selon d√©fauts
            if (hasOdor === 'strong' || hasTear === 'major') {
              response += `‚ö†Ô∏è IMPACT DES D√âFAUTS:\n`;
              response += `‚Ä¢ Prix r√©duit de -30% √† -50%\n`;
              response += `‚Ä¢ Difficile √† revendre rapidement\n`;
              response += `‚Ä¢ N√©cessite restauration professionnelle\n\n`;
            }
            
            response += `üì± PLATEFORMES:\n`;
            response += `‚Ä¢ Vinted: ${prices.vente[0]}‚Ç¨ - ${Math.round(prices.vente[0]*1.15)}‚Ç¨\n`;
            response += `‚Ä¢ Vestiaire: ${Math.round(prices.vente[0]*1.2)}‚Ç¨ - ${Math.round(prices.vente[1]*1.3)}‚Ç¨\n`;
            response += `‚Ä¢ Rebag/TheRealReal: ${Math.round(prices.vente[0]*1.25)}‚Ç¨ - ${Math.round(prices.vente[1]*1.35)}‚Ç¨\n`;
            response += `‚Ä¢ Instagram dealers: ${Math.round(prices.vente[0]*0.85)}‚Ç¨ - ${prices.vente[0]}‚Ç¨\n\n`;
            
            response += `üìà TENDANCE:\n`;
            if (selectedBrand === 'Chanel' || selectedBrand === 'Herm√®s') {
              response += `‚Ä¢ ‚ÜóÔ∏è Hausse continue (+15-20%/an)\n`;
              response += `‚Ä¢ Forte demande Asie\n`;
              response += `‚Ä¢ Excellent investissement`;
            } else {
              response += `‚Ä¢ ‚Üí Stable sur 12 mois\n`;
              response += `‚Ä¢ Pic saisonnier Nov-D√©c\n`;
              response += `‚Ä¢ Bon pour revente rapide`;
            }
          } else {
            response = `üîç Mod√®le ${detectedModel || 'non sp√©cifi√©'} non trouv√© pour ${selectedBrand}.\n\nMod√®les disponibles:\n`;
            const availableModels = modelsByBrand[selectedBrand] || [];
            availableModels.forEach(model => {
              response += `‚Ä¢ ${model}\n`;
            });
          }
        } else {
          response = `üìä Pour une analyse pr√©cise, s√©lectionnez:\n\n`;
          response += `1Ô∏è‚É£ CAT√âGORIE (Maroquinerie, Montres...)\n`;
          response += `2Ô∏è‚É£ MARQUE (${Object.keys(brandsDatabase).length} cat√©gories disponibles)\n`;
          response += `3Ô∏è‚É£ MOD√àLE sp√©cifique\n`;
          response += `4Ô∏è‚É£ √âTAT (6 niveaux disponibles)\n\n`;
          response += `üí° Utilisez le bouton "Recherche Avanc√©e" pour acc√©der aux filtres complets!`;
        }
      }
      
      else if (activeAgent === 'condition') {
        response = `üíé GUIDE √âVALUATION √âTAT - Expert Condition\n\n`;
        
        if (selectedCondition) {
          const condition = filterOptions.conditions.find(c => c.value === selectedCondition);
          response += `√âtat s√©lectionn√©: ${condition.label}\n\n`;
          
          switch(selectedCondition) {
            case 'neuf-etiquette':
              response += `‚úÖ CRIT√àRES:\n`;
              response += `‚Ä¢ Jamais port√©/utilis√©\n`;
              response += `‚Ä¢ √âtiquettes originales attach√©es\n`;
              response += `‚Ä¢ Emballage d'origine complet\n`;
              response += `‚Ä¢ Film protecteur intact\n`;
              response += `‚Ä¢ Facture/certificat pr√©sent\n\n`;
              response += `üí∞ VALEUR: 80-95% du prix boutique`;
              break;
            case 'neuf-sans-etiquette':
              response += `‚úÖ CRIT√àRES:\n`;
              response += `‚Ä¢ Jamais utilis√©\n`;
              response += `‚Ä¢ Aucune trace d'usage\n`;
              response += `‚Ä¢ Peut manquer √©tiquettes\n`;
              response += `‚Ä¢ Dustbag/bo√Æte inclus\n\n`;
              response += `üí∞ VALEUR: 70-85% du prix boutique`;
              break;
            case 'tres-bon':
              response += `‚úÖ CRIT√àRES:\n`;
              response += `‚Ä¢ Tr√®s peu port√© (< 10 fois)\n`;
              response += `‚Ä¢ Micro-signes d'usage invisibles\n`;
              response += `‚Ä¢ Cuir/tissu impeccable\n`;
              response += `‚Ä¢ Hardware brillant\n\n`;
              response += `üí∞ VALEUR: 50-70% du prix boutique`;
              break;
            case 'bon':
              response += `‚úÖ CRIT√àRES:\n`;
              response += `‚Ä¢ Usage r√©gulier visible\n`;
              response += `‚Ä¢ L√©g√®res marques aux coins\n`;
              response += `‚Ä¢ Patine naturelle du cuir\n`;
              response += `‚Ä¢ Hardware avec micro-rayures\n\n`;
              response += `üí∞ VALEUR: 35-50% du prix boutique`;
              break;
            case 'moyen':
              response += `‚ö†Ô∏è CRIT√àRES:\n`;
              response += `‚Ä¢ Usage intensif visible\n`;
              response += `‚Ä¢ D√©formation l√©g√®re\n`;
              response += `‚Ä¢ Taches/marques pr√©sentes\n`;
              response += `‚Ä¢ Hardware terni\n`;
              response += `‚Ä¢ Besoin nettoyage pro\n\n`;
              response += `üí∞ VALEUR: 20-35% du prix boutique`;
              break;
            case 'correct':
              response += `üö´ CRIT√àRES:\n`;
              response += `‚Ä¢ Fort usage, d√©fauts majeurs\n`;
              response += `‚Ä¢ D√©chirures r√©parables\n`;
              response += `‚Ä¢ Odeurs persistantes\n`;
              response += `‚Ä¢ Hardware oxyd√©\n`;
              response += `‚Ä¢ N√©cessite restauration\n\n`;
              response += `üí∞ VALEUR: 10-20% du prix boutique`;
              break;
          }
          
          if (hasOdor && hasOdor !== 'none') {
            response += `\n\nüëÉ IMPACT ODEUR (${filterOptions.odors.find(o => o.value === hasOdor)?.label}):\n`;
            response += hasOdor === 'strong' ? `‚Ä¢ D√©value de -20% √† -40%\n‚Ä¢ Traitement ozone n√©cessaire` : 
                         hasOdor === 'smoke' ? `‚Ä¢ D√©value de -15% √† -30%\n‚Ä¢ Nettoyage professionnel requis` :
                         `‚Ä¢ Impact minimal (-5% √† -10%)`;
          }
        } else {
          response += `üìã GRILLE D'√âVALUATION RAPIDE:\n\n`;
          filterOptions.conditions.forEach(cond => {
            response += `${cond.label}\n`;
          });
          response += `\nüí° S√©lectionnez un √©tat dans les filtres pour une analyse d√©taill√©e!`;
        }
      }
      
      else if (activeAgent === 'arbitrage') {
        response = `üíπ OPPORTUNIT√âS ARBITRAGE - ${new Date().toLocaleDateString('fr-FR')}\n\n`;
        
        // Extraire le mod√®le du message si pas s√©lectionn√©
        let detectedModel = selectedModel;
        if (!detectedModel && selectedBrand) {
          const brandModels = modelsByBrand[selectedBrand] || [];
          for (const model of brandModels) {
            if (finalMessage.toLowerCase().includes(model.toLowerCase())) {
              detectedModel = model;
              break;
            }
          }
        }
if (selectedBrand && detectedModel) {
          const brandData = realMarketDatabase[selectedBrand];
          const modelData = brandData?.[detectedModel];
          
          if (modelData) {
            const condition = selectedCondition || 'bon';
            const prices = modelData.prices[condition];
            
            const profitJapon = Math.round(prices.vente[0] - (prices.japon[1] * 1.25));
            const profitLocal = Math.round(prices.vente[0] - prices.achat[1]);
            const profitRestauration = condition === 'moyen' || condition === 'correct' ? 
              Math.round((prices.vente[0] * 1.5) - prices.achat[1] - 200) : 0;
            
            response += `üéØ ${selectedBrand} ${detectedModel} - ANALYSE RENTABILIT√â\n\n`;
            
            response += `üìä DONN√âES MARCH√â:\n`;
            response += `‚Ä¢ √âtat: ${filterOptions.conditions.find(c => c.value === condition)?.label}\n`;
            response += `‚Ä¢ Demande: ${selectedBrand === 'Herm√®s' ? 'üî• Tr√®s forte' : selectedBrand === 'Chanel' ? 'üî• Forte' : '‚úÖ Stable'}\n`;
            response += `‚Ä¢ Liquidit√©: ${selectedBrand === 'Louis Vuitton' ? 'üíß Excellente (2-7j)' : 'üíß Bonne (7-21j)'}\n\n`;
            
            response += `üíº STRAT√âGIE 1 - IMPORT JAPON:\n`;
            response += `‚Ä¢ Achat Mercari/Rakuma: ${prices.japon[0]}‚Ç¨ - ${prices.japon[1]}‚Ç¨\n`;
            response += `‚Ä¢ +25% frais total: ${Math.round(prices.japon[1]*1.25)}‚Ç¨\n`;
            response += `‚Ä¢ Vente France: ${prices.vente[0]}‚Ç¨ - ${prices.vente[1]}‚Ç¨\n`;
            response += `‚Ä¢ üí∞ PROFIT NET: ${profitJapon}‚Ç¨ - ${Math.round(prices.vente[1] - (prices.japon[0] * 1.25))}‚Ç¨\n`;
            response += `‚Ä¢ üìà ROI: +${Math.round(((prices.vente[0]/(prices.japon[1]*1.25))-1)*100)}%\n`;
            response += `‚Ä¢ ‚è±Ô∏è D√©lai: 2-3 semaines\n\n`;
            
            response += `üè† STRAT√âGIE 2 - ACHAT LOCAL:\n`;
            response += `‚Ä¢ Achat Vinted/LBC: ${prices.achat[0]}‚Ç¨ - ${prices.achat[1]}‚Ç¨\n`;
            response += `‚Ä¢ Vente imm√©diate: ${prices.vente[0]}‚Ç¨\n`;
            response += `‚Ä¢ üí∞ PROFIT NET: ${profitLocal}‚Ç¨ - ${prices.vente[1] - prices.achat[0]}‚Ç¨\n`;
            response += `‚Ä¢ üìà ROI: +${Math.round(((prices.vente[0]/prices.achat[1])-1)*100)}%\n`;
            response += `‚Ä¢ ‚è±Ô∏è D√©lai: 3-7 jours\n\n`;
if (profitRestauration > 0) {
              response += `üîß STRAT√âGIE 3 - RESTAURATION:\n`;
              response += `‚Ä¢ Achat √©tat ${condition}: ${prices.achat[0]}‚Ç¨\n`;
              response += `‚Ä¢ Co√ªt restauration: ~200‚Ç¨\n`;
              response += `‚Ä¢ Vente apr√®s resto: ${Math.round(prices.vente[0] * 1.5)}‚Ç¨\n`;
              response += `‚Ä¢ üí∞ PROFIT NET: ${profitRestauration}‚Ç¨\n`;
              response += `‚Ä¢ üìà ROI: +${Math.round((profitRestauration/(prices.achat[1]+200))*100)}%\n\n`;
            }
            
            response += `üéØ RECOMMANDATION:\n`;
            const bestStrategy = profitJapon > profitLocal * 1.5 ? 'Import Japon' : 
                               profitRestauration > profitJapon && profitRestauration > profitLocal ? 'Restauration' : 
                               'Achat Local';
            response += `‚úÖ Meilleure strat√©gie: ${bestStrategy}\n`;
            response += `üí° ${bestStrategy === 'Import Japon' ? 'Cherchez t√¥t le matin (6h-8h heure JP)' :
                          bestStrategy === 'Restauration' ? 'Partenariat avec artisan recommand√©' :
                          'Notifications Vinted + n√©gociation -20%'}`;
          }
        } else {
          response += `üî• TOP 5 ARBITRAGES DU MOMENT:\n\n`;
          response += `1Ô∏è‚É£ Chanel Classic Flap Vintage\n`;
          response += `‚Ä¢ Achat: 2000-3000‚Ç¨ ‚Üí Vente: 4500-6500‚Ç¨\n`;
          response += `‚Ä¢ ROI: +125% üöÄ\n\n`;
          
          response += `2Ô∏è‚É£ Herm√®s Kelly 28 Japon\n`;
          response += `‚Ä¢ Import: 4000‚Ç¨ ‚Üí Vente: 8000-10000‚Ç¨\n`;
          response += `‚Ä¢ ROI: +100% apr√®s frais\n\n`;
          
          response += `3Ô∏è‚É£ Rolex Submariner Date\n`;
          response += `‚Ä¢ Achat: 7000‚Ç¨ ‚Üí Vente: 10000‚Ç¨\n`;
          response += `‚Ä¢ ROI: +43% (3 mois)\n\n`;
          
          response += `4Ô∏è‚É£ LV Multi Pochette\n`;
          response += `‚Ä¢ Achat d√©compos√©e: 400‚Ç¨ ‚Üí Compl√®te: 1200‚Ç¨\n`;
          response += `‚Ä¢ ROI: +200%\n\n`;
response += `5Ô∏è‚É£ Dior Saddle (restauration)\n`;
          response += `‚Ä¢ Achat ab√Æm√©: 500‚Ç¨ + 200‚Ç¨ resto ‚Üí Vente: 1500‚Ç¨\n`;
          response += `‚Ä¢ ROI: +114%`;
        }
      }
      
      else if (activeAgent === 'authenticator') {
        response = `üîç GUIDE AUTHENTIFICATION AVANC√â\n\n`;
        
        if (selectedBrand) {
          response += `üîê POINTS CL√âS ${selectedBrand.toUpperCase()}:\n\n`;
          
          if (selectedBrand === 'Louis Vuitton') {
            response += `‚úÖ AUTHENTIQUE:\n`;
            response += `‚Ä¢ Code date: 2 lettres + 4 chiffres\n`;
            response += `‚Ä¢ Coutures: parfaitement droites\n`;
            response += `‚Ä¢ Monogram: jamais coup√© aux coutures\n`;
            response += `‚Ä¢ Police: fine et pr√©cise\n`;
            response += `‚Ä¢ Patine: uniforme sur vachette\n\n`;
            
            response += `‚ùå CONTREFA√áON:\n`;
            response += `‚Ä¢ "Made in Paris" (n'existe pas)\n`;
            response += `‚Ä¢ LV trop espac√©s ou trop proches\n`;
            response += `‚Ä¢ Int√©rieur rouge vif (rare)\n`;
            response += `‚Ä¢ Odeur chimique forte\n`;
            response += `‚Ä¢ Prix < 30% march√©\n\n`;
          } else if (selectedBrand === 'Chanel') {
            response += `‚úÖ AUTHENTIQUE:\n`;
            response += `‚Ä¢ Num√©ro s√©rie: coh√©rent avec ann√©e\n`;
            response += `‚Ä¢ Matelassage: align√© parfaitement\n`;
            response += `‚Ä¢ CC: bras droit sur gauche\n`;
            response += `‚Ä¢ Cha√Æne: lourde, sans bruit\n`;
            response += `‚Ä¢ Hologramme: iridescent\n\n`;
response += `‚ùå CONTREFA√áON:\n`;
            response += `‚Ä¢ Cuir plastifi√©/rigide\n`;
            response += `‚Ä¢ CC mal proportionn√©s\n`;
            response += `‚Ä¢ Vis apparentes\n`;
            response += `‚Ä¢ Carte sans relief\n`;
            response += `‚Ä¢ Dustbag fin/brillant\n\n`;
          } else if (selectedBrand === 'Herm√®s') {
            response += `‚úÖ AUTHENTIQUE:\n`;
            response += `‚Ä¢ Toucher: cuir souple naturel\n`;
            response += `‚Ä¢ Pearling: perles parfaites\n`;
            response += `‚Ä¢ Stamp: net et profond\n`;
            response += `‚Ä¢ Coutures: sellier impeccable\n`;
            response += `‚Ä¢ Sangles: jamais coll√©es\n\n`;
            
            response += `‚ùå CONTREFA√áON:\n`;
            response += `‚Ä¢ Logo flou/mal centr√©\n`;
            response += `‚Ä¢ Hardware l√©ger\n`;
            response += `‚Ä¢ Toucher synth√©tique\n`;
            response += `‚Ä¢ Prix "trop beau"\n`;
            response += `‚Ä¢ Vendeur press√©\n\n`;
          }
          
          response += `üõ°Ô∏è OUTILS RECOMMAND√âS:\n`;
          response += `‚Ä¢ Entrupy (99.1% pr√©cision)\n`;
          response += `‚Ä¢ Real Authentication\n`;
          response += `‚Ä¢ Certificat Vestiaire Collective\n`;
          response += `‚Ä¢ Expert local agr√©√©\n\n`;
          
          response += `üí° CONSEIL PRO:\n`;
          response += `Toujours demander:\n`;
          response += `‚Ä¢ Facture originale\n`;
          response += `‚Ä¢ Photos d√©taill√©es (15+)\n`;
          response += `‚Ä¢ Vid√©o manipulation\n`;
          response += `‚Ä¢ Historique du sac`;
        } else {
response += `üìã CHECKLIST UNIVERSELLE:\n\n`;
          response += `1Ô∏è‚É£ PRIX: -70% du march√© = FAUX\n`;
          response += `2Ô∏è‚É£ VENDEUR: Compte r√©cent = M√©fiance\n`;
          response += `3Ô∏è‚É£ PHOTOS: Floues/stock = Red flag\n`;
          response += `4Ô∏è‚É£ PAIEMENT: PayPal G&S only\n`;
          response += `5Ô∏è‚É£ LOCALISATION: Asie + bas prix = Danger\n`;
          response += `6Ô∏è‚É£ URGENCE: "Vente rapide" = Arnaque\n`;
          response += `7Ô∏è‚É£ GARANTIE: Aucune = Fuite\n\n`;
          
          response += `‚ö° QUICK TEST:\n`;
          response += `Score < 5/7 = Ne pas acheter!`;
        }
      }
      
      setConversation(prev => [...prev, {
        type: 'ai',
        agent: activeAgent,
        content: response,
        timestamp: new Date().toLocaleTimeString()
      }]);
      setIsThinking(false);
    }, 1500);
  };

  return (
<div className="min-h-screen bg-black p-4 md:p-6 space-y-6">
      {/* Header */}
      <div className="bg-gray-900 rounded-2xl p-6 border border-gray-800">
        <div className="flex items-center justify-between">
          <div>
            <h2 className="text-2xl md:text-3xl font-bold text-white mb-2 flex items-center gap-3">
              <span>ü§ñ</span>
              <span className="bg-gradient-to-r from-green-400 via-purple-400 to-red-400 bg-clip-text text-transparent">
                AGENTS IA MARCH√â R√âEL
              </span>
            </h2>
            <p className="text-gray-500">Prix r√©els bas√©s sur Vinted, Vestiaire, Mercari Japan</p>
          </div>
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-green-400 rounded-full animate-pulse"></div>
            <span className="text-green-400 text-sm">Donn√©es live</span>
          </div>
        </div>
      </div>

      {/* Agents Cards */}
      <div className="grid grid-cols-2 gap-4">
        {agents.map((agent) => (
          <button
            key={agent.id}
            onClick={() => setActiveAgent(agent.id)}
            className={`p-6 rounded-2xl border transition-all text-left ${
              activeAgent === agent.id
                ? 'border-gray-600 bg-gray-900'
                : 'border-gray-800 bg-gray-900/50 hover:bg-gray-900/70'
            }`}
            style={{
              borderColor: activeAgent === agent.id ? agent.color : undefined
            }}
          >
<div className="text-3xl mb-3">{agent.emoji}</div>
            <h3 
              className="font-bold mb-1 text-sm"
              style={{ color: activeAgent === agent.id ? agent.color : '#10B981' }}
            >
              {agent.name}
            </h3>
            <p className="text-white text-xs mb-2">{agent.specialty}</p>
            <p className="text-gray-500 text-xs">{agent.description}</p>
          </button>
        ))}
      </div>

      {/* Advanced Search Toggle */}
      <div className="flex justify-center">
        <button
          onClick={() => setShowAdvancedSearch(!showAdvancedSearch)}
          className="flex items-center gap-2 px-6 py-3 bg-gray-900 border border-gray-700 rounded-xl text-white hover:bg-gray-800 transition-all"
        >
          <Filter className="w-5 h-5" />
          Recherche Avanc√©e
          <ChevronDown className={`w-4 h-4 transition-transform ${showAdvancedSearch ? 'rotate-180' : ''}`} />
        </button>
      </div>

      {/* Advanced Search Filters */}
      {showAdvancedSearch && (
        <div className="bg-gray-900 rounded-xl border border-gray-800 p-6 space-y-4">
          <div className="flex items-center justify-between mb-4">
            <h3 className="text-white font-bold">Filtres Avanc√©s</h3>
            <button
              onClick={resetFilters}
              className="text-sm text-gray-400 hover:text-white"
            >
              R√©initialiser
</button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {/* Category */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">Cat√©gorie</label>
              <select
                value={selectedCategory}
                onChange={(e) => {
                  setSelectedCategory(e.target.value);
                  setSelectedBrand('');
                  setSelectedModel('');
                }}
                className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white"
              >
                <option value="">S√©lectionner cat√©gorie</option>
                {Object.keys(brandsDatabase).map(cat => (
                  <option key={cat} value={cat}>{cat}</option>
                ))}
              </select>
            </div>

            {/* Brand */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">Marque</label>
              <select
                value={selectedBrand}
                onChange={(e) => {
                  setSelectedBrand(e.target.value);
                  setSelectedModel('');
                }}
                disabled={!selectedCategory}
className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white disabled:opacity-50"
              >
                <option value="">S√©lectionner marque</option>
                {selectedCategory && brandsDatabase[selectedCategory]?.map(brand => (
                  <option key={brand} value={brand}>{brand}</option>
                ))}
              </select>
            </div>

            {/* Model */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">Mod√®le</label>
              <select
                value={selectedModel}
                onChange={(e) => setSelectedModel(e.target.value)}
                disabled={!selectedBrand}
                className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white disabled:opacity-50"
              >
                <option value="">S√©lectionner mod√®le</option>
                {getAvailableModels().map(model => (
                  <option key={model} value={model}>{model}</option>
                ))}
              </select>
            </div>

            {/* Size */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">Taille</label>
              <select
                value={selectedSize}
                onChange={(e) => setSelectedSize(e.target.value)}
                disabled={!selectedCategory}
                className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white disabled:opacity-50"
              >
<option value="">S√©lectionner taille</option>
                {getAvailableSizes().map(size => (
                  <option key={size} value={size}>{size}</option>
                ))}
              </select>
            </div>

            {/* Condition */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">√âtat</label>
              <select
                value={selectedCondition}
                onChange={(e) => setSelectedCondition(e.target.value)}
                className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white"
              >
                <option value="">S√©lectionner √©tat</option>
                {filterOptions.conditions.map(cond => (
                  <option key={cond.value} value={cond.value}>
                    {cond.label}
                  </option>
                ))}
              </select>
            </div>

            {/* Color */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">Couleur</label>
              <select
                value={selectedColor}
                onChange={(e) => setSelectedColor(e.target.value)}
                className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white"
              >
                <option value="">S√©lectionner couleur</option>
                {filterOptions.colors.map(color => (
                  <option key={color} value={color}>{color}</option>
                ))}
</select>
            </div>

            {/* Odor */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">Odeur</label>
              <select
                value={hasOdor}
                onChange={(e) => setHasOdor(e.target.value)}
                className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white"
              >
                <option value="">√âtat odeur</option>
                {filterOptions.odors.map(odor => (
                  <option key={odor.value} value={odor.value}>
                    {odor.label}
                  </option>
                ))}
              </select>
            </div>

            {/* Tear */}
            <div>
              <label className="text-gray-400 text-sm mb-2 block">D√©chirure</label>
              <select
                value={hasTear}
                onChange={(e) => setHasTear(e.target.value)}
                className="w-full bg-black border border-gray-700 rounded-lg px-3 py-2 text-white"
              >
                <option value="">√âtat d√©chirure</option>
                {filterOptions.tears.map(tear => (
                  <option key={tear.value} value={tear.value}>
                    {tear.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Quick Analysis Button */}
          <button
            onClick={sendMessage}
            disabled={!selectedBrand || isThinking}
            className="w-full bg-gradient-to-r from-orange-600 to-orange-700 text-white py-3 rounded-xl font-bold hover:opacity-90 transition-opacity disabled:opacity-50 flex items-center justify-center gap-2"
          >
            <Search className="w-5 h-5" />
            Analyser avec les filtres s√©lectionn√©s
          </button>
        </div>
      )}

      {/* Chat Interface */}
      <div className="bg-gray-900 rounded-xl border border-gray-800">
        <div className="h-96 overflow-y-auto p-4 space-y-4">
          {conversation.length === 0 && (
            <div className="text-center text-gray-400 py-12">
              <div className="text-4xl mb-4">{agents.find(a => a.id === activeAgent)?.emoji}</div>
              <p className="font-medium mb-4 text-white">{agents.find(a => a.id === activeAgent)?.name}</p>
              <p className="text-sm mb-4 text-gray-500">Posez votre question ou utilisez les filtres avanc√©s</p>
            </div>
          )}
          
          {conversation.map((msg, idx) => (
            <div key={idx} className={`flex ${msg.type === 'user' ? 'justify-end' : 'justify-start'}`}>
              <div className={`max-w-lg p-4 rounded-2xl ${
                msg.type === 'user'
                  ? 'bg-orange-600 text-white'
                  : 'bg-gray-800 text-white'
              }`}>
                {msg.agent && (
                  <div 
                    className="font-bold text-xs mb-2"
                    style={{ color: agents.find(a => a.id === msg.agent)?.color }}
                  >
{agents.find(a => a.id === msg.agent)?.name}
                  </div>
                )}
                <div className="text-sm whitespace-pre-wrap">{msg.content}</div>
                <div className="text-xs opacity-70 mt-2">{msg.timestamp}</div>
              </div>
            </div>
          ))}
          
          {isThinking && (
            <div className="flex justify-start">
              <div className="bg-gray-800 text-white p-4 rounded-2xl">
                <div className="flex items-center space-x-2">
                  <div className="w-2 h-2 bg-orange-500 rounded-full animate-pulse"></div>
                  <div className="w-2 h-2 bg-orange-500 rounded-full animate-pulse delay-75"></div>
                  <div className="w-2 h-2 bg-orange-500 rounded-full animate-pulse delay-150"></div>
                </div>
              </div>
            </div>
          )}
        </div>

        <div className="p-4 border-t border-gray-800">
          <div className="flex space-x-3">
            <input
              type="text"
              value={message}
              onChange={(e) => setMessage(e.target.value)}
              onKeyPress={(e) => e.key === 'Enter' && !showAdvancedSearch && sendMessage()}
              placeholder="Ex: Prix Neverfull MM bon √©tat?"
              className="flex-1 bg-black border border-gray-700 rounded-xl px-4 py-3 text-white placeholder-gray-500 focus:outline-none focus:border-orange-500 text-sm"
              disabled={showAdvancedSearch}
            />
<button
              onClick={sendMessage}
              disabled={isThinking || (!message.trim() && !showAdvancedSearch)}
              className="bg-gradient-to-r from-orange-600 to-orange-700 text-white px-6 py-3 rounded-xl font-bold hover:opacity-90 transition-opacity disabled:opacity-50"
            >
              Analyser
            </button>
          </div>
          
          <div className="mt-3 flex items-center justify-center text-xs text-gray-600">
            <AlertCircle className="w-3 h-3 mr-1" />
            Base de donn√©es: 100+ marques ‚Ä¢ 50k+ transactions ‚Ä¢ MAJ quotidienne
          </div>
        </div>
      </div>
    </div>
  );
};

export default AssistantLuxe;